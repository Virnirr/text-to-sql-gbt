SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE Country = "France";
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = "French";
SELECT T2.song_name, T2.song_release_year FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age = (SELECT MIN(age) FROM singer);
SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT COUNTRY, COUNT(*) FROM singer GROUP BY COUNTRY;
SELECT Country, COUNT(*) FROM singer GROUP BY Country;
SELECT t1.Song_Name FROM singer AS t1 JOIN singer_in_concert AS t2 ON t1.Singer_ID = t2.Singer_ID EXCEPT SELECT t1.Song_Name FROM singer AS t1 JOIN singer AS t2 ON t1.Age < t2.Age;
SELECT Song_Name FROM singer_in_concert WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Age > (SELECT AVG(Age) FROM singer));
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Average) FROM stadium;
SELECT Average, MAX(Capacity) FROM stadium;
SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT COUNT(*) FROM concert WHERE Year = "2014" OR Year = "2015";
SELECT COUNT(*) FROM concert WHERE year = "2014" or year = "2015";
SELECT name, COUNT(*) FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id GROUP BY t2.stadium_id;
SELECT COUNT(*) FROM concert WHERE stadium_id = 1;
SELECT t1.NAME, t1.CAPACITY FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id = t2.stadium_id WHERE t2.year >= "2014" GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2013 GROUP BY T1.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM stadium EXCEPT SELECT T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id;
SELECT t1.Name FROM stadium AS t1 LEFT JOIN concert AS t2 ON t1.Stadium_ID = t2.Stadium_ID WHERE t2.Stadium_ID IS NULL;
SELECT DISTINCT T1.Country FROM singer AS T1, singer AS T2 WHERE T1.age > 40 AND T2.age < 30;
SELECT Name FROM stadium EXCEPT SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = "2014";
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = "2014");
SELECT T2.name, T3.theme, COUNT(*) FROM singer AS T2 JOIN singer_in_concert AS T1 ON T2.singer_id = T1.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id GROUP BY T3.concert_id;
SELECT concert_Name, Theme, COUNT(*) FROM concert;
SELECT COUNT(*) AS singer, name FROM singer GROUP BY name;
SELECT T2.Name, COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name;
SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.Year = "2014";
SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.Year = '2014';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey %';
SELECT Name, Country FROM singer WHERE Song_Name LIKE "Hey %";
SELECT T1.Location, T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = "2015" INTERSECT SELECT T1.Location, T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = "2014";
SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE YEAR = '2014' INTERSECT SELECT stadium_id FROM concert WHERE YEAR = '2015');
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT MAX(Capacity) FROM stadium);
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT COUNT(PetID) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM pets WHERE pets.pettype = "dog" ORDER BY pet_age LIMIT 1;
SELECT weight FROM pets WHERE pets.y_pet_age = (SELECT MIN(pet_age) FROM pets WHERE pets.y_pet_type = "dog");
SELECT MAX(weight), petType FROM pets GROUP BY petType;
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20);
SELECT COUNT(*) FROM Pets WHERE PetType = "dog" AND PetID IN (SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = "F");
SELECT COUNT(*) FROM Pets WHERE PetType = "dog" AND Pets.PetID IN (SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = "f";
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T2.StuID = T1.StuID JOIN Pets AS T3 ON T3.PetID = T2.PetID WHERE T3.PetType = "cat" OR T3.PetType = "dog";
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog';
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = "cat" INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = "dog";
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat' INTERSECT SELECT StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'dog');
SELECT T1.Major, T1.Age FROM Student AS T1 WHERE NOT T1.StuID IN (SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets ON T2.PetID = Pets.PetID WHERE Pets.PetType = "cat");
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = "cat");
SELECT StuID FROM HAS_PET EXCEPT SELECT StuID FROM Pets WHERE PetType <> 'cat';
SELECT StuID FROM Student EXCEPT SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = "cat";
SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = "dog" EXCEPT SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = "cat";
SELECT t1.Fname FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID = t2.StuID JOIN Pets AS t3 ON t2.PetID = t3.PetID WHERE t3.PetType = 'dog' EXCEPT SELECT t1.Fname FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID = t2.StuID JOIN Pets AS t3 ON t2.PetID = t3.PetID WHERE t3.PetType = 'cat';
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets ORDER BY pet_age LIMIT 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT Has_Pet.PetID, Pets.weight FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1;
SELECT AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype;
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT AVG(pets.weight), pets.PetType FROM pets GROUP BY pets.pettype;
SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID;
SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID;
SELECT Has_Pet.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';
SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith ';
SELECT T1.StuID, COUNT(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID;
SELECT COUNT(petid) FROM Has_Pet GROUP BY stuid;
SELECT T2.Fname, T2.Sex FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(*) > 1;
SELECT T1.Fname, T2.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(*) > 1;
SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = "cat" AND T3.pet_age = 3;
SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = "Cat" AND T3.pet_age = 3;
SELECT AVG(Age) FROM Student EXCEPT SELECT T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID;
SELECT AVG(T1.Age) FROM Student AS T1 WHERE NOT EXISTS (SELECT * FROM Has_Pet AS T2 WHERE T1.StuID = T2.StuID);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*), t1.Continent, t2.Continent FROM countries AS t1 JOIN continents AS t2 ON t1.Continent = t2.ContId GROUP BY t2.continent;
SELECT ContId, Continent, COUNT(*) FROM continents;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT c.FullName, c.Id, COUNT(*) FROM car_makers AS c JOIN model_list AS m ON c.Id = m.Maker GROUP BY c.Id;
SELECT T1.Id, T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;
SELECT MIN(horsepower) FROM cars_data;
SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id ORDER BY T2.Horsepower LIMIT 1;
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT t2.Model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId WHERE t1.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT maker FROM car_makers WHERE id IN (SELECT maker FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE year = 1970));
SELECT DISTINCT t1.Maker FROM car_makers AS t1 JOIN cars_data AS t2 ON t1.Id = t2.Id WHERE t2.Year = 1970;
SELECT T2.Model, T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT MIN(Year) FROM cars_data);
SELECT c3.Maker, _min) FROM car_names AS c1 JOIN cars_data AS c2 ON c1.MakeId = c2.Id JOIN car_makers AS c3 ON c2.Maker = c3.Id WHERE c2.Year = (SELECT MIN(Year) FROM cars_data);
SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT Model FROM model_list WHERE ModelId IN (SELECT Model FROM cars_data WHERE Year > 1980);
SELECT continents.Continent, COUNT(car_makers.Id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent;
SELECT T2.Continent, COUNT(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.Continent;
SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryId ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) AS T1, t2.FullName FROM model_list AS t1 JOIN car_makers AS t2 ON t1.Maker = t2.Id GROUP BY t1.Maker;
SELECT COUNT(*), Id, FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY model_list.Maker;
SELECT accelerate FROM cars_data WHERE model = "amc hornet sportabout ( sw )";
SELECT accelerate FROM cars_data WHERE id = (SELECT makeid FROM car_names WHERE model = "amc hornet sportabout ( sw )");
SELECT COUNT(*) FROM car_makers WHERE country = "france";
SELECT COUNT(*) FROM car_makers WHERE country = "France";
SELECT COUNT(*) FROM car_makers WHERE country = 'USA';
SELECT COUNT(*) FROM car_names AS t1 JOIN cars_data AS t2 ON t1.MakeId = t2.Id JOIN car_makers AS t3 ON t1.Model = t3.FullName WHERE t3.Country = "United States";
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker;
SELECT Model, Make FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id;
SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId;
SELECT T1.CountryName, T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year;
SELECT AVG(weight), year FROM cars_data GROUP BY year;
SELECT T3.CountryName FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country WHERE T1.Continent = "Europe" GROUP BY T2.CountryId HAVING COUNT(*) >= 3;
SELECT DISTINCT T2.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = "4" GROUP BY T1.CountryId HAVING COUNT(T1.CountryId) >= 3;
SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 3;
SELECT MAX(Horsepower), Make FROM cars_data WHERE Cylinders = 3;
SELECT CAR_NAMES FROM CARS_DATA WHERE MPG = (SELECT MAX(MPG) FROM CARS_DATA);
SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1;
SELECT AVG(T3.Horsepower) FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T1.Year < 1980;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN model_list ON cars_data.Id = model_list.Model WHERE model_list.Maker = 2;
SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = "volvo");
SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders;
SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders;
SELECT Model FROM model_list ORDER BY ModelId COUNT DESC LIMIT 1;
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT ModelId) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT cars_data.Id FROM cars_data WHERE cars_data.year = 1980;
SELECT * FROM cars_data WHERE year = 1980;
SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = "American Motor Company");
SELECT COUNT(*) FROM model_list WHERE Maker = 8;
SELECT T2.FullName, T2.Id FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.Id HAVING COUNT(*) > 3;
SELECT DISTINCT T1.Id, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker HAVING COUNT(*) > 3;
SELECT DISTINCT t7.model FROM car_makers AS t1 JOIN model_list AS t2 ON t2.maker = t1.id JOIN car_names AS t3 ON t2.modelid = t3.makeid JOIN cars_data AS t4 ON t4.id = t3.makeid WHERE t1.fullname = 'General Motors' OR weight > 3500;
SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN cars_data AS t3 WHERE T1.Maker = "General Motors" OR T3.Weight > 3500 GROUP BY T2.Model;
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;
SELECT T1.Year FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight > 3000 INTERSECT SELECT T1.Year FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < 4000;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT cylinders FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model = "volvo") ORDER BY accelerate LIMIT 1;
SELECT MIN(cylinders) FROM cars_data WHERE horsepower = "volvo" AND accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE horsepower = "volvo");
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2) AS T1;
SELECT COUNT(*) FROM countries WHERE CountryId IN (SELECT T2.Continent FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.Continent HAVING COUNT(*) > 2);
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 4;
SELECT model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;
SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) EXCEPT SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders > 3;
SELECT t1.Model, t2.Make FROM car_names AS t1 JOIN cars_data AS t2 ON t1.MakeId = t2.Id WHERE NOT t2.Horsepower = (SELECT MIN(Horsepower) FROM cars_data) AND t2.Cylinders < 4;
SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 8 AND year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;
SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight < 3500 EXCEPT SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'Ford Motor Company';
SELECT Model FROM model_list WHERE Id IN (SELECT Maker FROM cars_data WHERE Weight < 3500) EXCEPT SELECT Model FROM model_list WHERE Maker = 12;
SELECT CountryName FROM countries EXCEPT SELECT Maker FROM car_makers;
SELECT CountryName FROM countries WHERE NOT CountryId IN (SELECT Country FROM car_makers);
SELECT Id, Maker FROM car_makers EXCEPT SELECT Id, Maker FROM car_makers WHERE NOT Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) = 1) UNION SELECT Maker, COUNT(Maker) FROM model_List GROUP BY Maker HAVING COUNT(Maker) > 3;
SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN cars_data AS T3 ON T3.Id = T2.Model GROUP BY T1.Maker HAVING COUNT(DISTINCT T3.MakeId) > 3 AND COUNT(DISTINCT T2.ModelId) >= 2;
SELECT DISTINCT T3.Id, T3.FullName FROM countries AS T1 JOIN cars_data AS T2 ON T1.CountryId = T2.Id JOIN car_makers AS T3 ON T3.Country = T1.CountryId WHERE T3.Id > 3 UNION SELECT DISTINCT T3.Id, T3.FullName FROM countries AS T1 JOIN cars_data AS T2 ON T1.CountryId = T2.Id JOIN car_makers AS T3 ON T3.Country = T1.CountryId JOIN car_makers AS T4 ON T4.Maker = 'fiat';
SELECT T3.CountryId, T3.CountryName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN countries AS T3 ON T1.Country = T3.CountryId WHERE T1.Maker > 3 UNION SELECT T3.CountryId, T3.CountryName FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.Model JOIN countries AS T3 ON T1.Country = T3.CountryId WHERE T2.Model = "fiat";
SELECT country FROM airlines WHERE airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = "Jetblue Airways";
SELECT abbreviation FROM airlines WHERE airLine = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways";
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA";
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA";
SELECT AirportCode, AirportName FROM airports WHERE City = "Anthony";
SELECT AirportCode, AirportName FROM airports WHERE City = "Anthony";
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL ';
SELECT airline FROM airlines WHERE abbreviation = 'UAL ';
SELECT COUNT(*) FROM airlines WHERE Country = "USA";
SELECT COUNT(*) FROM airlines WHERE country = "USA";
SELECT city, Country FROM airports WHERE AirportName = "Alton";
SELECT city, country FROM airports WHERE airportcode = "Alton";
SELECT AirportName FROM airports WHERE AirportCode = 'AKO ';
SELECT AirportName FROM airports WHERE AirportCode = "AKO ";
SELECT AirportName FROM airports WHERE City = "Aberdeen";
SELECT AirportName FROM airports WHERE City = "Aberdeen";
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG ';
SELECT COUNT(*) FROM flights WHERE SourceAirport = "APG ";
SELECT COUNT(*) FROM flights WHERE DestAirport = "ATO";
SELECT COUNT(*) FROM flights WHERE DestAirport = "ATO";
SELECT COUNT(FlightNo) FROM flights JOIN airports ON SourceAirport = AirportCode WHERE city = "Aberdeen";
SELECT COUNT(*) FROM flights WHERE SourceAirport = "ABZ";
SELECT COUNT(*) FROM flights AS t1 JOIN airports AS t2 ON t1.DestAirport = t2.AirportCode WHERE t2.City = "Aberdeen";
SELECT COUNT(*) FROM flights WHERE destairport = "Aberdeen";
SELECT count(*) FROM flights WHERE sourceairport = "Aberdeen" AND destairport = "Ashley时";
SELECT COUNT(*) FROM flights WHERE destairport = "Ashley" AND sourceairport = "Aberdeen";
SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE abbreviation = 'JetBlue Airways ');
SELECT COUNT(*) FROM flights WHERE airline = 1;
SELECT COUNT(*) FROM flights WHERE airline = 24 AND destairport = "ASY ";
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = "ASY" AND airlines.Airline = "United Airlines";
SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = "United Airlines ") AND sourceairport = "AHD ";
SELECT COUNT(f.FlightNo) FROM flights AS f JOIN airlines AS a ON a.uid = f.Airline JOIN airports AS s ON f.SourceAirport = s.AirportCode WHERE a.Airline = "United Airlines" AND s.AirportCode = "AHD";
SELECT COUNT(*) FROM airlines WHERE airline = "united airlines" INTERSECT SELECT COUNT(*) FROM flights WHERE destairport = "aberdeen";
SELECT COUNT(*) FROM flights WHERE Airline = 6 AND Destination = "Aberdeen, Scotland";
SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T3.City FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t2.city FROM flights AS t1 JOIN airports AS t2 ON t1.sourceairport = t2.airportcode GROUP BY t2.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) AS _number FROM flights GROUP BY DestAirport ORDER BY _number LIMIT 1;
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) LIMIT 1;
SELECT Airline FROM airlines ORDER BY uid DESC LIMIT 1;
SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline ORDER BY COUNT(*) LIMIT 1;
SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid ORDER BY COUNT(*) LIMIT 1;
SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportCode = "AHD ";
SELECT Airlines FROM flights WHERE SourceAirport = "AHD";
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD ';
SELECT airlines.Airline FROM airlines, flights, airports WHERE airports.AirportCode = flights.DestAirport AND airports.City = "AHD" AND airlines.uid = flights.Airline;
SELECT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = "APG" INTERSECT SELECT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = "CVO";
SELECT t1.Airline FROM flights AS t1 JOIN airports AS t2 ON t1.SourceAirport = t2.AirportCode WHERE t2.City = "APG" INTERSECT SELECT t1.Airline FROM flights AS t1 JOIN airports AS t2 ON t1.SourceAirport = t2.AirportCode WHERE t2.City = "CVO";
SELECT airlines FROM FLIGHTS WHERE SourceAirport <> 'APG' AND DestAirport = 'CVO';
SELECT T3.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airlines AS T3 ON T1.Airline = T3.uid WHERE T2.AirportCode = "CVO" EXCEPT SELECT T3.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airlines AS T3 ON T1.Airline = T3.uid WHERE T2.AirportCode = "APG";
SELECT T3.Airline FROM Flights AS T1 JOIN Airlines AS T3 ON T1.Airline = T3.uid GROUP BY T1.Airline HAVING COUNT(*) >= 10;
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline HAVING COUNT(*) >= 10;
SELECT Airline FROM airlines WHERE uid < 200;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200;
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE airline = "United Airlines");
SELECT FlightNo FROM flights WHERE Airline = "United Airlines";
SELECT FlightNo FROM flights WHERE SourceAirport = "APG";
SELECT FlightNo FROM flights WHERE SourceAirport = "APG";
SELECT FlightNo FROM flights WHERE DestAirport = "APG";
SELECT FlightNo FROM flights WHERE DestAirport = "APG";
SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = "Aberdeen");
SELECT FlightNo FROM flights WHERE SourceAirport = "Aberdeen";
SELECT FlightNo FROM flights WHERE DestAirport = 'aberdeen';
SELECT FlightNo FROM flights WHERE destAirport = (SELECT AirportCode FROM airports WHERE city = "Aberdeen");
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.airportCode WHERE airports.City = "Aberdeen" OR airports.City = "Abilene";
SELECT COUNT(*) FROM flights JOIN airports ON DestAirport = AirportCode WHERE City = "Aberdeen" OR City = "Abilene";
SELECT AirportName FROM airports EXCEPT SELECT AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport UNION SELECT AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport;
SELECT AirportCode FROM airports EXCEPT SELECT DestAirport FROM flights INTERSECT SELECT SourceAirport FROM flights;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT COUNT(*), city FROM employee GROUP BY city;
SELECT City, COUNT(*) FROM employee GROUP BY City;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT COUNT(*), location FROM shop GROUP BY location;
SELECT COUNT(*) FROM shop GROUP BY Location;
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1;
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1;
SELECT MIN(number_products) FROM shop UNION SELECT MAX(number_products) FROM shop;
SELECT MIN(number_products) FROM shop UNION SELECT MAX(number_products) FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID WHERE t2.Bonus = (SELECT MAX(Bonus) FROM evaluation);
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT Name FROM employee EXCEPT SELECT e.Name FROM employee AS e JOIN evaluation AS v ON e.Employee_ID = v.Employee_ID;
SELECT shop.Name FROM shop, hiring WHERE shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL;
SELECT COUNT(shop_ID), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID;
SELECT COUNT(*) AS _number_of_employees_working_at_shop_ FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT T1.District FROM shop AS T1 JOIN shop AS T2 ON T1.District = T2.District WHERE T1.Number_products < 3000 AND T2.Number_products > 10000;
SELECT District FROM shop GROUP BY District HAVING MAX(Number_products) > 10000 INTERSECT SELECT District FROM shop GROUP BY District HAVING SUM(Number_products) < 3000;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w %';
SELECT T1.document_name, T1.document_id FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_description LIKE "%w%";
SELECT Documents.Document_ID, Documents.Template_ID FROM Documents WHERE Documents.Document_Name = "Robbin CV";
SELECT T2.Document_ID, T1.Template_ID, T2.Document_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = "Robbin CV";
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'PPT ';
SELECT COUNT(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = "PPT";
SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID;
SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID;
SELECT T1.Template_ID FROM Documents AS T2 JOIN Templates AS T1 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Documents.Template_ID FROM Documents);
SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code = "PP" OR Template_Type_Code = "PPT";
SELECT Template_ID FROM Templates WHERE Template_Type_Code = "PP or PPT";
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = "CV";
SELECT COUNT(*) FROM Ref_Template_Types WHERE Template_Type_Description = "CV";
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code;
SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(*) < 3;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3;
SELECT MIN(T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code ORDER BY T1.Version_Number LIMIT 1;
SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base";
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Data base";
SELECT T2.document_name FROM templates AS T1 JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = "BK";
SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = "BK");
SELECT Template_Type_Code, COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Template_Type_Code;
SELECT T1.Template_Type_Code, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code;
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t1.Template_Type_Code FROM Templates AS t1 JOIN Documents AS t2 ON t1.Template_ID = t2.Template_ID GROUP BY t1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t1.Template_Type_Code FROM Ref_Template_Types AS t1 WHERE NOT EXISTS (SELECT * FROM Templates AS t2 LEFT JOIN Documents AS t3 ON t2.Template_ID = t3.Template_ID WHERE t1.Template_Type_Code = t2.Template_Type_Code);
SELECT Templates.Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = " Book ";
SELECT DISTINCT T2.Template_Type_Description FROM Documents AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_ID = T2.Template_Type_Code;
SELECT DISTINCT T2.Document_Description FROM templates AS T1 JOIN documents AS T2 ON T1.Template_ID = T2.Template_ID;
SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = "Presentation";
SELECT Template_ID FROM Documents WHERE Document_Description = 'Presentation ';
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show ';
SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show ';
SELECT Paragraph_ID FROM Paragraphs WHERE Paragraph_Text = "Korea ";
SELECT TOher_Details FROM Paragraphs WHERE Paragraph_Text = "Korea ";
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = 'Welcome to NY';
SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE document_name = "Welcome to NY";
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = "Customer reviews";
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = "Customer reviews ";
SELECT Document_ID, COUNT(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT Document_ID, COUNT(*) FROM paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT T1.Document_ID, T1.Document_Name, COUNT(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) LIMIT 1;
SELECT MIN(T2.Document_ID) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID;
SELECT document_id FROM paragraphs WHERE paragraph_id BETWEEN 1 AND 2;
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;
SELECT T2.document_id FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE t1.paragraph_text = 'Brazil ' AND T1.paragraph_text = 'Ireland ';
SELECT A.Document_ID FROM Paragraphs AS A JOIN Documents AS B ON A.Document_ID = B.Document_ID WHERE A.Paragraph_Text = 'Brazil ' INTERSECT SELECT A.Document_ID FROM Paragraphs AS A JOIN Documents AS B ON A.Document_ID = B.Document_ID WHERE A.Paragraph_Text = 'Ireland ';
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age;
SELECT Name FROM teacher ORDER BY Age;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT DISTINCT Name FROM teacher WHERE Hometown != "Little Lever Urban District";
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Name FROM teacher WHERE Age = "32" OR Age = "33";
SELECT T1.Hometown FROM teacher AS T1 WHERE T1.Teacher_ID = (SELECT T2.Teacher_ID FROM teacher AS T2 ORDER BY T2.Age LIMIT 1);
SELECT T1.Hometown FROM teacher AS T1 ORDER BY T1.Age LIMIT 1;
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown;
SELECT COUNT(*) FROM teacher GROUP BY Hometown;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT t1.Name, t2.Course FROM teacher AS t1 JOIN course_arrange AS t2 ON t1.Teacher_ID = t2.Teacher_ID;
SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T1.Name;
SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name;
SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Course = "math";
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = "Math";
SELECT T1.Name, COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name;
SELECT T1.Name, COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID;
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(*) >= 2;
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(*) >= 2;
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT Name FROM teacher EXCEPT SELECT T2.Name FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.Teacher_ID = T2.Teacher_ID;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age;
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT open_year, num_of_staff FROM museum WHERE name = "Plaza Museum";
SELECT Museum.Name FROM museum WHERE Museum.Num_of_Staff > (SELECT MIN(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year > 2010);
SELECT T3.ID, T3.Name, T3.Age FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID JOIN visitor AS T3 ON T1.visitor_ID = T3.ID GROUP BY T1.visitor_ID HAVING COUNT(*) > 1;
SELECT visitor_ID, Name, Level_of_membership FROM visit GROUP BY visitor_ID ORDER BY Total_spent DESC LIMIT 1;
SELECT t2.museumid, t1.Name FROM visit AS t2 JOIN museum AS t1 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY num_of_ticket DESC LIMIT 1;
SELECT Name FROM museum EXCEPT SELECT T3.Name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id = T2.museum_id JOIN visitor AS T3 ON T1.visitor_id = T3.id;
SELECT Name, Age FROM visitor ORDER BY Num_of_Ticket DESC LIMIT 1;
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;
SELECT SUM(Total_spent) FROM visit WHERE Level_of_membership = 1;
SELECT visitor.Name FROM visitor WHERE EXISTS (SELECT visit.Museum_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 INTERSECT SELECT visit.Museum_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2011);
SELECT visitor_ID FROM visit WHERE museum_ID NOT IN (SELECT museum_ID FROM museum WHERE open_year > 2010);
SELECT COUNT(*) FROM museum WHERE open_year > 2013 UNION SELECT COUNT(*) FROM museum WHERE open_year < 2008;
SELECT COUNT(*) FROM players;
SELECT COUNT(DISTINCT player_id) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = "USA";
SELECT first_name, birth_date FROM players WHERE country_code = "USA";
SELECT AVG(loser_age) FROM matches UNION SELECT AVG(winner_age) FROM matches;
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT T2.first_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.year = 2013 INTERSECT SELECT T2.first_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.year = 2016;
SELECT T4.first_name, T4.last_name FROM matches AS T1 JOIN players AS T2 ON T2.player_id = T1.winner_id JOIN rankings AS T3 ON T3.player_id = T1.winner_id JOIN players AS T4 ON T3.player_id = T4.player_id WHERE T1.year = 2013 INTERSECT SELECT T4.first_name, T4.last_name FROM matches AS T1 JOIN players AS T2 ON T2.player_id = T1.winner_id JOIN rankings AS T3 ON T3.player_id = T1.winner_id JOIN players AS T4 ON T3.player_id = T4.player_id WHERE T1.year = 2016;
SELECT COUNT(match_num) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open';
SELECT T2.first_name, T2.country_code FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE t1.tourney_name = "WTA Championships" INTERSECT SELECT T4.first_name, T4.country_code FROM matches AS T3 JOIN players AS T4 ON T3.winner_id = T4.player_id WHERE t3.tourney_name = "Australian Open";
SELECT T1.first_name, T2.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.ranking = (SELECT MAX(ranking) FROM rankings);
SELECT first_name, country_code FROM players WHERE player_id IN (SELECT loser_id FROM matches ORDER BY loser_age DESC LIMIT 1);
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name || " " || last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = "left" ORDER BY birth_date;
SELECT first_name || ' ' || last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_rank_points, winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(winner_rank_points), winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(winner_rank_points) DESC LIMIT 1;
SELECT T1.winner_name FROM matches AS T1 JOIN tournaments AS T2 ON T1.tourney_id = T2.tourney_id WHERE tourney_name = "Australian Open" ORDER BY T1.winner_rank_points DESC LIMIT 1;
SELECT matches.winner_name FROM matches WHERE tourney_name = "Australian Open" ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT winner_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT AVG(ranking), players.first_name FROM rankings JOIN players ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT T2.first_name, AVG(rank) FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name;
SELECT T3.ranking_points, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.player_id;
SELECT T2.first_name, SUM(ranking_points) FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id;
SELECT COUNT(*), country_code FROM players GROUP BY country_code;
SELECT COUNT(DISTINCT T2.country_code) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT RANKING_DATE, SUM(TOURS) FROM rankings GROUP BY RANKING_DATE;
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT COUNT(*), year FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3;
SELECT DISTINCT winner_id FROM matches WHERE tourney_name = "WTA Championships" AND winner_hand = "L";
SELECT COUNT(*) FROM matches WHERE winner_hand = "L" AND tourney_name = "WTA Championships";
SELECT t1.first_name, t1.country_code, t1.birth_date FROM players AS t1 JOIN matches AS t2 ON t1.player_id = t2.winner_id ORDER BY t1.player_id LIMIT 1;
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT player_id FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches));
SELECT COUNT(*) AS COUNT, hand FROM players GROUP BY hand;
SELECT COUNT(*), hand FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured ';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) FROM death UNION SELECT MIN(killed) FROM death;
SELECT AVG(injured) FROM death;
SELECT t2.killed, t2.injured FROM ship AS t1 JOIN death AS t2 ON t1.id = t2.caused_by_ship_id WHERE t1.tonnage = 't ';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril ';
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = "Brig";
SELECT t2.id, t2.name FROM death AS t1 JOIN battle AS t2 ON t1.caused_by_ship_id = t2.id GROUP BY t1.caused_by_ship_id HAVING SUM(t1.killed) > 10;
SELECT T2.caused_by_ship_id, T3.name FROM death AS T1 JOIN death AS T2 ON T1.caused_by_ship_id = T2.caused_by_ship_id JOIN ship AS T3 ON T2.caused_by_ship_id = T3.id GROUP BY T2.caused_by_ship_id ORDER BY SUM(T2.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan ' AND latin_commander = 'Baldwin I ';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = "225");
SELECT battle.name, battle.date FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice ' UNION SELECT ship.lost_in_battle FROM ship WHERE ship.name = 'HMS Atalanta ';
SELECT name, result, bulgarian_commander FROM battle EXCEPT SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel';
SELECT note FROM death WHERE note LIKE 'East %';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = "Math";
SELECT T3.section_description FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id JOIN Departments AS T3 ON T2.course_id = T3.department_id WHERE T3.department_name = "Math";
SELECT zip_postcode FROM Addresses WHERE city = "Port Chelsea";
SELECT zip_postcode FROM addresses WHERE city = "port chelsea";
SELECT Degree_Programs.department_id, Departments.department_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY Degree_Programs.department_id ORDER BY COUNT(*) DESC;
SELECT T1.department_name, T3.degree_program_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id GROUP BY T3.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT DEGREE_SUMMARY_NAME) FROM DEGREE_PROGRAMS;
SELECT COUNT(*) FROM Degree_Programs;
SELECT COUNT(degree_program_id) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Engineering';
SELECT COUNT(*) FROM degree_programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = "Engineering";
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT T2.course_name, T1.course_id FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) <= 2;
SELECT course_id, course_name FROM Courses EXCEPT SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) >= 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT T1.semester_id, T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer %';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.degree_program_id, T1.semester_id HAVING COUNT(*) = 2;
SELECT T3.student_id, T3.first_name, T3.middle_name, T3.last_name FROM Student_Enrolment AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Students AS T3 ON T2.student_id = T3.student_id WHERE T1.student_enrolment_id != T2.student_enrolment_id LIMIT 1;
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = "Bachelor";
SELECT T4.first_name, T4.middle_name, T4.last_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T2.degree_program_id = T1.degree_program_id JOIN Students AS T3 ON T3.student_id = T2.student_id JOIN Students AS T4 ON T4.student_id = T2.student_id WHERE T1.degree_summary_name = "Bachelors";
SELECT degree_program_id, COUNT(*) FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T4.student_id, T4.first_name, T4.middle_name, T4.last_name, COUNT(*) FROM Transcripts AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Students AS T4 ON T3.student_id = T4.student_id GROUP BY T4.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T3.student_id, T3.first_name, T3.middle_name, T3.last_name, COUNT(*) FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Students AS T3 ON T1.student_id = T3.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT semester_name FROM Semesters EXCEPT SELECT semester_name FROM Student_Enrolment;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT T2.course_name FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id;
SELECT T3.course_name FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Courses AS T3 ON T2.course_id = T3.course_id;
SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = "North Carolina" EXCEPT SELECT T3.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id;
SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = "North Carolina") EXCEPT SELECT last_name FROM Student_Enrolment;
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(*) >= 2;
SELECT DISTINCT t.transcript_id, t.transcript_date FROM Transcripts AS t JOIN Transcript_Contents AS tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(*) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy" AND last_name = "Ward";
SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy" AND last_name = "Ward";
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students);
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered IS NOT NULL ORDER BY date_first_registered LIMIT 1;
SELECT DISTINCT T7.first_name, T7.middle_name, T7.last_name FROM Transcripts AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Courses AS T4 ON T2.course_id = T4.course_id JOIN Students AS T5 ON T3.student_id = T5.student_id JOIN Departments AS T6 ON T4.course_name = T6.department_name JOIN Students AS T7 ON T3.student_id = T7.student_id WHERE T4.course_name = 'BA - European Studies' ORDER BY T1.transcript_date LIMIT 1;
SELECT T3.first_name, T3.middle_name, T3.last_name FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Students AS T3 ON T1.student_id = T3.student_id ORDER BY T3.date_left LIMIT 1;
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id JOIN Addresses AS T3 ON T1.current_address_id = T3.address_id WHERE NOT T3.line_1 = T2.line_1 AND NOT T3.line_2 = T2.line_2 AND NOT T3.line_3 = T2.line_3;
SELECT first_name FROM Students WHERE permanent_address_id != current_address_id;
SELECT T2.address_id, T2.line_1, T2.line_2, T2.line_3 FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T1.current_address_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.address_id, T2.line_1, T2.line_2 FROM Student_Enrolment AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Students ON T1.student_id = Students.student_id GROUP BY T1.current_address_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(* ) FROM Transcripts;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT COUNT(*) AS MAX_int FROM Student_Enrolment_Courses Transcripts JOIN Student_Enrolment_Courses Stud_Enrol ON Transcripts.student_course_id = Stud_Enrol.student_course_id;
SELECT COUNT(*) FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT transcript_date FROM Transcripts ORDER BY transcript_id LIMIT 1;
SELECT MIN(transcript_date), transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY transcript id ORDER BY COUNT(*) LIMIT 1;
SELECT DISTINCT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Semesters AS T3 ON T1.semester_id = T3.semester_id WHERE T2.department_id = 1 INTERSECT SELECT DISTINCT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Semesters AS T3 ON T1.semester_id = T3.semester_id WHERE T2.department_id = 2;
SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name = "Masters") AND T2.department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name = "Bachelors");
SELECT current_address_id, COUNT(DISTINCT current_address_id) FROM Students GROUP BY current_address_id;
SELECT line_1 FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students UNION SELECT permanent_address_id FROM Students);
SELECT student_id, permament_address_id FROM Students ORDER BY student_id DESC;
SELECT other_student_details FROM Students ORDER BY last_name DESC;
SELECT section_description FROM Sections WHERE section_name = "h";
SELECT section_description FROM Sections WHERE section_name = "h";
SELECT T2.first_name FROM Students AS T1 JOIN Students AS T2 on T1.permanent_address_id = T2.current_address_id WHERE T1.country = "Haiti" UNION SELECT first_name FROM Students WHERE cell_mobile_number = "09700166582";
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = "Haiti" UNION SELECT T1.first_name FROM Students AS T1 WHERE T1.cell_mobile_number = "09700166582";
SELECT Title FROM Cartoon ORDER BY Title;
SELECT Title FROM Cartoon ORDER BY Title;
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
SELECT title FROM cartoon WHERE directed_by = "ben jones";
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" UNION SELECT Title FROM Cartoon WHERE Directed_by = "Brandon Vietti";
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC;
SELECT Country, COUNT(1) FROM TV_Channel GROUP BY Country ORDER BY COUNT(1) DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), content FROM tv_channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT content FROM tv_channel WHERE series_name = "Sky Radio";
SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT COUNT(*) FROM TV_Channel WHERE Language = "English";
SELECT COUNT(*) FROM TV_Channel WHERE Language = "English";
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) LIMIT 1;
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) LIMIT 1;
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language;
SELECT COUNT(*) FROM TV_Channel WHERE Language = "French" ;
SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = "The Rise of the Blue Beetle!";
SELECT t1.series_name FROM TV_Channel AS t1 JOIN Cartoon AS t2 ON t1.id = t2.Channel WHERE t2.Title = "The Rise of the Blue Beetle";
SELECT t2.Title FROM TV_channel AS t1 JOIN Cartoon AS t2 ON t1.id = t2.channel WHERE t1.series_name = "Sky Radio";
SELECT T2.Title FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.Channel = T2.Channel JOIN TV_Channel AS T3 ON T3.id = T1.Channel WHERE T3.series_name = "Sky Radio";
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime";
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = "A Love of a Lifetime";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = "YES";
SELECT TV_Channel.package_option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.hight_definition_tv = "Yes";
SELECT Country FROM TV_channel WHERE content = 'Cartoon' EXCEPT SELECT country FROM TV_Channel WHERE written_by = 'Todd Casey';
SELECT p.country FROM tv_channel AS p JOIN cartoon AS a ON a.channel = p.id WHERE a.written_by = "Todd Casey";
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T3.Channel FROM Cartoon AS T3 JOIN TV_series AS T2 ON T3.id = T2.id WHERE T3.Written_by = "Todd Casey" UNION SELECT T3.Channel FROM Cartoon AS T3 JOIN TV_series AS T2 ON T3.id = T2.id WHERE T3.Written_by = "Todd Casey");
SELECT TV_Channel.Country FROM TV_Channel WHERE NOT TV_Channel.id IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey");
SELECT t1.series_name, t1.country FROM TV_Channel AS t1 JOIN cartoon AS t2 ON t1.id = t2.channel WHERE t2.directed_by = 'Ben Jones' AND t2.directed_by = 'Michael Chang';
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Michael Chang";
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> "English";
SELECT pixel_aspect_ratio_PAR, country FROM tv_channel WHERE language != "english";
SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2;
SELECT id FROM TV_Channel EXCEPT SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = "Ben Jones";
SELECT channel FROM cartoon EXCEPT SELECT channel FROM cartoon WHERE directed_by = "Ben Jones";
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = "Ben Jones");
SELECT DISTINCT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_series.Channel FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones");
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT final_table_made, best_finish FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID;
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE Earnings > 300000;
SELECT Name FROM poker_player WHERE Earnings > 300000;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made;
SELECT p1.birth_date FROM people AS p1 JOIN poker_player AS p2 ON p1.people_id = p2.people_id WHERE p2.earnings = (SELECT MIN(earnings) FROM poker_player);
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY Earnings ASC LIMIT 1;
SELECT T1.money_rank FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T2.height DESC LIMIT 1;
SELECT T1.money_rank FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T2.height DESC LIMIT 1;
SELECT AVG(earnings) FROM poker_player AS l1 JOIN people AS l2 ON l1.people_id = l2.people_id WHERE l2.height > 200;
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT COUNT(Nationality) FROM people GROUP BY Nationality;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name FROM people WHERE Nationality <> "Russia";
SELECT Name FROM people WHERE Nationality <> "Russia";
SELECT Name FROM people EXCEPT SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;
SELECT Name FROM people EXCEPT SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM VOTES;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES WHERE state = 'CA ';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway ';
SELECT DISTINCT state, created FROM VOTES;
SELECT T1.contestant_number, T2.contestant_name FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2;
SELECT T3.CONTESTANT_NUMBER, T2.CONTESTANT_NAME FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.CONTESTANT_NUMBER = T2.CONTESTANT_NUMBER JOIN (SELECT CONTESTANT_NUMBER, COUNT(*) FROM VOTES GROUP BY CONTESTANT_NUMBER ORDER BY COUNT(*), CONTESTANT_NUMBER LIMIT 1) AS T3 ON T1.CONTESTANT_NUMBER = T3.CONTESTANT_NUMBER;
SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(*) FROM CONTESTANTS EXCEPT SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES);
SELECT state FROM votes GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE contestant_name = "Tabatha Gehling";
SELECT t1.area_code FROM VOTES AS t1 JOIN CONTESTANTS AS t2 ON t1.contestant_number = t2.contestant_number WHERE t2.contestant_name = 'Tabatha Gehling' INTERSECT SELECT t1.area_code FROM VOTES AS t1 JOIN CONTESTANTS AS t2 ON t1.contestant_number = t2.contestant_number WHERE t2.contestant_name = 'Kelly Clauss';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';
SELECT COUNT( * ) FROM country WHERE GovernmentForm = 'Republic' ;
SELECT SUM(SurfaceArea) FROM country WHERE region = "Caribbean";
SELECT SUM(SurfaceArea) FROM country WHERE Region = "Caribbean";
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = "Kabul";
SELECT language FROM countrylanguage WHERE countrycode = "ABW" AND percentage = 100.0;
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.CODE = T2.CountryCode WHERE T1.NAME = 'Aruba' AND T2.IsOfficial = 'T';
SELECT population,lifeexpectancy FROM country WHERE name = "Brazil";
SELECT population, lifeexpectancy FROM country WHERE name = "brazil";
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT COUNT(*) FROM country WHERE name = 'Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = "Central Africa";
SELECT lifeexpectancy FROM country WHERE region = "central africa";
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;
SELECT SUM(Country.Population), MAX(Country.GNP) FROM country WHERE Continent = "Asia";
SELECT COUNT(population) FROM country WHERE continent = 'Asia', AND gnp = (SELECT MAX(gnp) FROM country WHERE continent = 'Asia');
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa';
SELECT SurfaceArea FROM country WHERE Continent = 'Asia' UNION SELECT SurfaceArea FROM country WHERE Continent = 'Europe';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';
SELECT Population FROM city WHERE District = "Gelderland";
SELECT CountryCode FROM city WHERE District = "Gelderland";
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory';
SELECT AVG(GNP), SUM(Population) FROM country WHERE Name = 'United States';
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT DISTINCT code FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = "Africa";
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = "Africa";
SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' GROUP BY Language);
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = "ABW";
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = "AFG" AND IsOfficial = "T";
SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = 'AFG';
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Continent FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(DISTINCT T1.Language) DESC LIMIT 1;
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Dutch';
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Dutch' INTERSECT SELECT COUNT(*) FROM countrylanguage WHERE Language = 'English';
SELECT country.Name FROM country WHERE country.Code IN (SELECT T1.CountryCode FROM countrylanguage AS T1, countrylanguage AS T2 WHERE T1.CountryCode = T2.CountryCode AND T1.Language = 'English' AND T2.Language = 'French' AND T1.IsOfficial = 'T' AND T2.IsOfficial = 'T');
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English';
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' AND T2.IsOfficial = 'T') INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'French' AND T2.IsOfficial = 'T');
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T');
SELECT COUNT(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese';
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T';
SELECT DISTINCT T2.Region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' OR T1.Language = 'Dutch';
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Dutch" OR countrylanguage.Language = "English";
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Dutch' OR T2.Language = 'English';
SELECT countrycode FROM countrylanguage WHERE isoFFICIAL = 'T' AND Language = 'english' UNION SELECT countrycode FROM countrylanguage WHERE isoFFICIAL = 'T' AND Language = 'dutch';
SELECT language FROM countrylanguage JOIN country WHERE continent = "Asia" ORDER BY percentage DESC LIMIT 1;
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT LANGUAGE FROM COUNTRYLANGUAGE WHERE ISOFFICIAL = 'T' EXCEPT SELECT LANGUAGE FROM CITY WHERE COUNTRYCODE IN (SELECT CODE FROM COUNTRY WHERE GOVERNMENTFORM = 'Republic') INTERSECT SELECT LANGUAGE FROM COUNTRYLANGUAGE;
SELECT T1.LANGUAGE FROM countryLanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.CODE WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.LANGUAGE HAVING COUNT(*) = 1;
SELECT city.Name FROM city JOIN countrylanguage ON city.ID = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" ORDER BY city.Population DESC LIMIT 1;
SELECT city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" ORDER BY city.Population DESC;
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 JOIN country AS T2 ON T1.Continent = T2.Continent WHERE T1.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = "Asia");
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'english');
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'english' AND isofficial = 'T');
SELECT COUNT(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'english');
SELECT DISTINCT Population from country EXCEPT SELECT DISTINCT population FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'english');
SELECT LANGUAGE FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix');
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix');
SELECT COUNT(DISTINCT T2.Language) FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T';
SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T';
SELECT Name FROM country WHERE Continent != "Europe" AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = "Europe");
SELECT T1.Name FROM country AS T1 JOIN country AS T2 ON T1.SurfaceArea > T2.SurfaceArea WHERE T2.Continent = 'Europe';
SELECT Name FROM country WHERE Continent = "Africa" AND NOT Population > ANY (SELECT MAX(population) FROM country WHERE continent = "Asia");
SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country AS c2 WHERE c2.Continent = 'Asia');
SELECT name FROM country WHERE continent = "Asia" AND population > (SELECT MAX(population) FROM country WHERE continent = "Africa");
SELECT c2.Name FROM country AS c1 JOIN country AS c2 ON c1.Continent = "Africa" AND c2.Continent = "Asia" WHERE c1.Population > c2.Population;
SELECT countrycode FROM countrylanguage WHERE language <> 'english';
SELECT CountryCode FROM countrylanguage WHERE Language <> 'English';
SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE language = 'english';
SELECT DISTINCT City_code FROM language WHERE NOT language = "English";
SELECT X.code FROM country AS X WHERE NOT EXISTS(SELECT * FROM countrylanguage AS Y WHERE Y.countrycode = X.code AND Y.language = 'english') AND X.governmentform <> 'republic';
SELECT Code FROM country EXCEPT SELECT t1.Code FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t2.Language = 'English' INTERSECT SELECT t1.Code FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t1.GovernmentForm = 'Republic';
SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'));
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'F' AND city.District = 'Europe' AND countrylanguage.Language = 'English';
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND IsOfficial = 'T' GROUP BY city.Name;
SELECT T2.Name FROM countrylanguage AS T1 JOIN city AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'Chinese' AND T1.IsOfficial = 'T' AND T2.District = 'Asia';
SELECT T1.Name, T1.IndepYear, T2.SurfaceArea FROM country AS T1 JOIN city AS T2 ON T1.Capital = T2.ID WHERE T1.Population = (SELECT MIN(Population) FROM country);
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);
SELECT population, name, headofstate FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT T1.Name, COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(*) >= 3;
SELECT T1.Name, COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(*) > 2;
SELECT COUNT(*), District FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT COUNT(*), District FROM city WHERE Population > (SELECT AVG(population) FROM city) GROUP BY District;
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT string(AVG(LifeExpectancy)), SUM(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
SELECT DISTINCT Continent, SUM(Population), AVG(LifeExpectancy) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
SELECT NAME, SURFACEAREA FROM country ORDER BY SURFACEAREA DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = "Asia";
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT Name FROM country WHERE Population = 80000 AND Continent = 'Europe';
SELECT Name FROM country WHERE Continent = "Europe" AND Population = 80000;
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = "North America" AND SurfaceArea > 3000;
SELECT COUNT(population), AVG(surfacearea) FROM country WHERE surfacearea > 3000 AND continent = 'North America';
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Language FROM countrylanguage AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode GROUP BY T1.CountryCode HAVING MAX(T2.Percentage) = T1.Percentage;
SELECT T1.CountryCode AND T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Percentage = (SELECT MAX(T1.Percentage) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code) GROUP BY T1.CountryCode;
SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'Spanish';
SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'Spanish';
SELECT CountryCode FROM countrylanguage WHERE Language = "Spanish" ORDER BY Percentage DESC LIMIT 1;
SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'spanish';
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality <> "USA";
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(share), MIN(share) FROM performance WHERE type != "Live final";
SELECT MAX(share), MIN(share) FROM performance WHERE type <> "Live final";
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY YEAR_of_work DESC LIMIT 1;
SELECT Name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID;
SELECT T1.Name, T3.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID;
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(*) > 1;
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1);
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded > 2008;
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company;
SELECT COUNT(DISTINCT T2.record_company) FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id;
SELECT Major_Record_Format FROM orchestra ORDER BY COUNT(*);
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*);
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT orchestra FROM orchestra EXCEPT SELECT orchestra FROM performance;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD";
SELECT COUNT(orchestra_id) FROM orchestra WHERE major_record_format = "CD or DVD";
SELECT MAX(Year_of_Founded) FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(Performance_ID) > 1;
SELECT Year_of_Founded FROM orchestra WHERE ORchestra_ID IN (SELECT ORchestra_ID FROM performance GROUP BY ORchestra_ID HAVING COUNT(*) > 1) - SUBSTR(Year_of_Founded, 5, 2) + 20, SUBSTR(Year_of_Founded, 3, 2);
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = "Kyle";
SELECT grade FROM highschooler WHERE name = "Kyle";
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = "kyle";
SELECT id FROM highschooler WHERE name = "kyle";
SELECT COUNT(*) FROM Highschooler WHERE grade <= 10;
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler GROUP BY grade;
SELECT COUNT(*), grade FROM Highschooler GROUP BY grade;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(grade) FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id;
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id;
SELECT T2.name, COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id;
SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name;
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.name FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id = T2.id GROUP BY T1.friend_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t1.name FROM Highschooler AS t1 JOIN Friend AS t2 ON t1.ID = t2.student_id GROUP BY t2.student_id HAVING COUNT(*) >= 3;
SELECT name FROM highschooler WHERE ID IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3);
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T2.name = "Kyle";
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T2.name = "Kyle";
SELECT COUNT(*) FROM Friend AS t1 JOIN Highschooler AS t2 ON t1.friend_id = t2.id WHERE t2.name = 'Kyle';
SELECT COUNT(friend_id) FROM Friend JOIN Highschooler ON Highschooler.ID = student_id WHERE Highschooler.name = "Kyle";
SELECT id FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend);
SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN (SELECT T2.student_id FROM Friend AS T2);
SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT name FROM Highschooler WHERE id NOT IN (SELECT Highschooler.id FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id);
SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes;
SELECT student_id FROM Likes INTERSECT SELECT student_id FROM Friend;
SELECT t1.name FROM Highschooler AS t1 JOIN Friend AS t2 ON t1.ID = t2.friend_id INTERSECT SELECT t3.name FROM Highschooler AS t3 JOIN Likes AS t4 ON t3.ID = t4.student_id;
SELECT Name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend INTERSECT SELECT student_id FROM Likes);
SELECT COUNT(liked_id) FROM Likes GROUP BY student_id;
SELECT COUNT(*) FROM Likes GROUP BY student_id;
SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id;
SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
SELECT H1.name FROM Highschooler AS H1 JOIN Likes ON H1.id = Likes.student_id GROUP BY H1.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT h1.name FROM Likes AS l1 JOIN Highschooler AS h1 ON h1.ID = l1.student_id GROUP BY l1.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.name FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING Count(*) >= 2;
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(*) >= 2);
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2 AND Highschooler.grade > 5;
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(*) >= 2 AND T1.grade > 5;
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = "Kyle";
SELECT a.grade FROM Highschooler AS a JOIN Friend AS b ON a.ID = b.student_id JOIN Highschooler AS c ON b.friend_id = c.ID GROUP BY a.grade;
SELECT AVG(T1.grade) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id;
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state UNION SELECT T2.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state;
SELECT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state;
SELECT AVG(T2.age) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id;
SELECT AVG(D.age) FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id;
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id GROUP BY professional_id HAVING COUNT(*) > 2;
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2;
SELECT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.name HAVING SUM(T2.cost_of_treatment) <= 1000;
SELECT T3.name FROM Dogs AS T3 JOIN Owners AS T1 ON T3.owner_id = T1.owner_id JOIN Treatments AS T2 ON T2.dog_id = T3.dog_id GROUP BY T3.dog_id HAVING SUM(T2.Cost_of_Treatment) <= 1000;
SELECT T1.first_name FROM Professionals AS T1 LEFT JOIN Owners AS T2 ON T1.first_name = T2.first_name EXCEPT SELECT name FROM Dogs;
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT T2.professional_id FROM Treatments AS T2);
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 WHERE NOT EXISTS (SELECT * FROM Treatments AS T2 WHERE T1.professional_id = T2.professional_id);
SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT T2.professional_id, T2.role_code, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) >= 2;
SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT owner_id, last_name FROM owners WHERE owner_id IN (SELECT t1.owner_id FROM dogs AS t1 JOIN treatments AS t2 ON t1.dog_id = t2.dog_id JOIN professionals AS t3 ON t2.professional_id = t3.professional_id ORDER BY t2.cost_of_treatment DESC LIMIT 1);
SELECT T1.owner_id, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY SUM(t2.cost_of_treatment) DESC LIMIT 1;
SELECT T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1;
SELECT treatment_type_description FROM treatment_types JOIN treatments ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(cost_of_treatment) LIMIT 1;
SELECT t2.owner_id, t1.zip_code FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id JOIN charges AS t3 ON t2.dog_id = t3.dog_id GROUP BY t2.owner_id ORDER BY SUM(t3.dog_charge) DESC LIMIT 1;
SELECT T1.owner_id, SUM(T3.cost_of_treatment) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1;
SELECT T2.professional_id, T2.cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T2.professional_id HAVING COUNT(DISTINCT T1.treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM Professionals GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;
SELECT DISTINCT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT first_name, last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id;
SELECT date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id;
SELECT Cost_of_Treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT T2.treatment_type_description, T1.cost_of_treatment FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code;
SELECT DISTINCT T2.first_name, T2.last_name, T3.size_description FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T1.size_code = T3.size_code;
SELECT DISTINCT T8.first_name, T8.last_name, T3.size_description FROM Owners AS T8 JOIN Dogs AS T1 ON T8.owner_id = T1.owner_id JOIN Sizes AS T3 ON T3.size_code = T1.size_code;
SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id;
SELECT T3.first_name, T2.name FROM Owners AS T3 JOIN Dogs AS T2 ON T3.owner_id = T2.owner_id;
SELECT T3.name, T7.date_of_treatment FROM Dogs AS T3 JOIN Breeds AS T6 ON T3.breed_code = T6.breed_code JOIN Treatments AS T7 ON T7.dog_id = T3.dog_id WHERE T6.breed_code = (SELECT T4.breed_code FROM Dogs AS T4 GROUP BY T4.breed_code ORDER BY COUNT(*) LIMIT 1);
SELECT T1.name, T2.date_of_treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM breeds ORDER BY dogs OFFSET 1);
SELECT T3.first_name, T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = 'Virginia';
SELECT T2.first_name, T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = "Virginia";
SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id;
SELECT date_arrived, date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id ORDER BY T1.date_of_birth DESC LIMIT 1;
SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.date_of_birth LIMIT 1;
SELECT email_address FROM Professionals WHERE state = "Hawaii" OR state = "Wisconsin";
SELECT email_address FROM Professionals WHERE state = "Hawaii" OR state = "Wisconsin";
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(*) FROM Treatments;
SELECT COUNT(*) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West %';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West %';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE 'North %';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE 'North %';
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(date_of_birth) FROM dogs WHERE date_of_birth < (SELECT AVG(date_of_birth) FROM dogs);
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Dogs EXCEPT SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT COUNT(owner_id) FROM Owners WHERE NOT owner_id IN (SELECT owner_id FROM Dogs);
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = "1";
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = "1";
SELECT AVG(age) FROM Dogs;
SELECT AVG(AGE) FROM DOGS;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) FROM Charges WHERE charge_type = "expensive";
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT DISTINCT breed_code, size_code FROM Dogs;
SELECT DISTINCT breed_code, size_code FROM Dogs;
SELECT T2.first_name, T4.treatment_type_description FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id JOIN Dogs AS T3 ON T1.dog_id = T3.dog_id JOIN Treatment_Types AS T4 ON T1.treatment_type_code = T4.treatment_type_code;
SELECT first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions;
SELECT Name FROM singer ORDER BY Net_Worth_Millions;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship <> " France ";
SELECT Name FROM singer WHERE Citizenship <> "French";
SELECT Name FROM singer WHERE Birth_Year = 1948 UNION SELECT Name FROM singer WHERE Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT DISTINCT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT MAX(Net_Worth_Millions), Citizenship FROM singer GROUP BY Citizenship;
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT T2.Title, T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;
SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000;
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(*) > 1;
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*) > 1;
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID;
SELECT SUM(sales) FROM song AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY name;
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales = 0;
SELECT singer.Name FROM singer WHERE NOT singer.Singer_ID IN (SELECT singer_id FROM song);
SELECT T1.Citizenship FROM singer AS T1 WHERE T1.Birth_Year < 1945 INTERSECT SELECT T1.Citizenship FROM singer AS T1 WHERE T1.Birth_Year > 1955;
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year > 1955;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = "AirCon";
SELECT property_type_description FROM ref_property_types WHERE property_type_code = " - properties For Sale & Sold";
SELECT property_name FROM Properties WHERE property_type_code = 'pad' AND room_count > 1 UNION SELECT property_name FROM Properties WHERE property_type_code = 'hse' AND room_count > 1;
